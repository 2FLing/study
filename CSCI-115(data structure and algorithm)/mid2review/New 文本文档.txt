Tree_Maximum (x): 
  if(x.right != NIL)
	  return Tree_Maximum(x.right);
  return x;

Tree_Minimum(x):
  if(x.left !=NIL)
	  return Tree_Minimum(x.left);
  return x;

TREE-PREDECESSOR(x):
  if(x.left != NIL)
	  return Tree_Maximum(x.left_subtree);
  y = x.p;
  while(y != NIL && x == y.left)
  {
	  x = y;
	  y = y.p;
  }
  return y;

TREE-INSERT（T，z):
	x = T.root
	y = NIL
	while x != NIL
		y = x
		if z.key < x.key
			x = x.left
		else
			x = x.right
	z.p  = y
	if y = NIL
		T.root = z
	else
		if z <y.key
			y.left = z
		else
			y.right = z

transplant(T,u,v)
	if u.p == NIL
		T.root = v
	else if (u.p.left == u)
		u.p.left = v
	else
		u.p.right = v
	if v != NIL
		v.p = u.p

TREE-DELETE(T,z):
	if z.left == NIL
		transplant(z,z.right)
	else if z.right == NIL
		transplant(z,z.left)
	else
		y = Tree-MINIMUM(z.right)
		if y != z.right
			transplant(T,y,y.right)
			y.right = z.right
			y.right.p = y
		transplant(T,z,y)
		y.left = z.left
		y.left.p = y

LEFT-ROTATE(T,x):
	y = x.right
	x.right = y.left
	if y.left != T.nil
		y.left.p = x
	y.p = x.p
	if (x.p == T.nil)
		T.root = y
	else if (x.p.left == x)
		x.p.left = y
	else x.p.right = y
	y.left = x
	x.p = y


RIGHT-ROTATEE(T,x):
	y = x.left
	x.left = y.right
	if y.right != T.nil
		y.right.p = x
	y.p = x.p
	if x.p == T.nil
		y = T.root
	else if x.p.left  == x
		x.p.left = y
	else x.p.right = y
	y.right = x
	x.p = y

RB-INSERT(T,z):
	y = nil
	x  =  T.root
	while x != T.nil
		y = x
		if z.key < x.key
			x = x.left
		else
			x = x.right
	z.p = y
	if y == nil
		T.root = z
	else if z.key < y.key
		y.left = z
	else
		y.right = z
	z.left = T.nil
	z.right =T.nil
	z.color = red
	RB-INSERT-FIXUP (T,z)

RB-INSERT-FIXUP(T,z):
	while z.p.color == red:
		if z.p == z.p.p.left:
			y = z.p.p.right
			if y.color == red
			 	z.p.color = black
			 	y.color = black
			 	z.p.p.color = red
				z  = z.p.p
			else if z = z.p.right
				z = z.p
				LEFT-ROTATE(T,z)
			z.p.color =black
			z.p.p.color =red
			RIGHT-RPTATE(T,z.p.p)
		 else left-right exchange
		T.root.color = black
						 
RB-TRANSPLANT(T,u,v):
	if u.p == T.nil
		T.root = v
	else if u == u.p.left
		u.p.left = v
	else u.p.right = v
	v.p = u.p

RB-DELETE(T,z):
	y = z
	y-original-color = y.color
	if z.left == T.nil
		x = z.right
		RB-TRANSPLANT(T,z,right)
	elseif z.right = T.nil
		z = z.left
		RB-TRANSPLANT(T,z,z.left)
	else y = TREE-MINIMUM(z.right)
		y-original-color = y.color
		x = y.right
		if y.p == z
			x.p = y
		else RB-TRANSPLANT(T,y,y.right)
			y.right = z.right
			y.right.p = y
	RB-TRANSPLANT(T,z,y)
	y.left = z.left
	y.left.p = y
	y.color = z.color
	if y-original-color == BLACK
		RB-DELETE-FIXUP(T,x)

RB-DELETE-FIXUP(T,x)
	while x != T.root and x.color == BLACK
		if x== x.p.left
			w = x.p.right
			if w.color == RED
				w.color = BLACK
				x.p.color = RED
				LEFT-ROTATE(T, x.p)
				w = x.p.right
			if w.left.color == BLACK and w.right.color == BLACK
				w.color = RED
				x = x.p
			else if w.right.color == BLACK
				w.left.color = BLACK
				w.color = RD
				RIGHT-ROTATE(T,w)
				w = x.p.right
			w.color = x.p.color
			x.p.color = BLACK
			w.right.color = BLACK
			LEFT-ROTATE(T, x.p)
			x = T.root
		else exchange right and left
	x.color = BLACK	
	





		